			 	正则表达式(RegExp)
1、正则表达式的作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择

2、	\w === [0-9A-z_]
	\W === [^\w] 
	\s === [\t\n\r\v\f ];//制表符、换行符、回车符、垂直制表符、换页符、空格
	\S === [^\s]
	. === [^\r\n] //查找一个字符，除了换行和行结束符
	
3、正则表达式的匹配原则：贪婪原则，即能匹配多就绝不匹配少
	那么如何取消贪婪匹配呢，可以用问号，我们知道？可以用作匹配量词，即n?表示匹配任何0个或1个n的字符串。但是它也可以用作取消贪婪匹配，如n+?表示取消贪婪匹配，即尽可能只匹配一个n.

4、子表达式
	var reg = /(\w)\1(\w)\2/g ;//每个()称为一个子表达式，\1叫做第一个子表达式的引用，\2表示第二个子表达式的引用。所以该正则表达式表示匹配类似‘aabb’的子字符串。那么在正则表达式外引用子表达式呢，则用$,$1表示第一个子表达式的内容，$2表示第二个子表达式的内容。

5、支持正则表达式的String对象的方法
	- string.search(regexp);
		返回string中第一个与regexp相匹配的子串的起始位置，若没有找到则返回-1.该方法不执行全局匹配,即只返回第一个相匹配子串的起始位置
	- string.match(regexp);
		以数组形式返回string中第一个与regexp相匹配的子串，若regexp中含有全局标志g,则返回全部与regexp匹配的子串
	-`string.replace('字符串1','字符串2');//用字符串2替换string里的字符串1.
	string.replace(reg,'字符串1');//用字符串1替换正则表达式reg匹配的内容
	var reg = /(\w)\1(\w)\2/g;
	var string = 'aabb';
	string.replace(reg,'$2$2$1$1');//将'aabb'替换成'bbaa'
	string.replace(reg,function ($,$1,$2) {
		return $2 + $2 + $1 + $1 ;
	});//知函数function中，会自动传递参数进来。$表示全局匹配的表达式，$1表示第一个子表达式，$2表示第二个子表达式。

6、正向预查 ?= 和非的正向预查 != 
	作用：只参与匹配，不参与捕获。
		var reg = /1(?=0)/g;
		var string = '100100000';
		console.log(string.match(reg));	
	//选择后面跟的数字是0的数字1






















	