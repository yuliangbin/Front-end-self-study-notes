1、事件分为两部分：
	(1)行为本身
		onclick
		onmmouseover(onmouseenter)
		onmouseout(onmouseleave)
		onmousemove
		onscroll(滚动条滚动行为)
		onresize(window.onresize,浏览器窗口的大小改变事件)
		onload
		onunload(浏览器窗口关闭事件)
		onfocus(文本框获取焦点事件)
		onblur(文本框失去焦点事件)
		onkeydown 、onkeyup(键盘按键的按下和释放 事件)
		//哪怕我没有给上述事件绑定方法，事件也是存在的。
		
	(2)事件绑定：给元素的某个事件(行为)绑定方法
	
2、DOM 0级事件绑定和 DOM 2级事件绑定
	ele.onclick = function () {};
	//DOM 0级事件绑定
	ele.addEventListener("click",function () {},false);
	//DOM 2级事件绑定
	
3、	DOM 0级事件：元素本身的私有方法
	DOM 2级事件：定义在元素所属EventTarget类的原型上的
	
===============事件对象及兼容处理===================
oDiv.onclick = function (e) {
	var event = e || window.event ;
	console.dir(event);
}
1、我们是把匿名函数定义的部分当作一个值赋给oDiv的点击行为，(函数表达式)

2、重要：当点击时，不仅相应的事件执行了，浏览器默认的给这个方法传递了一个参数值 ->MouseEvent:鼠标事件对象
	(1)它是一个对象数据类型值，里面包含了很多的属性名和属性值，这些都是用来记录当前鼠标的相关信息的。
	
	(2)MouseEvent -> UIEvent -> Event -> Object
	
3、关于事件对象的MouseEvent的兼容问题
	事件对象本身存在兼容性问题：标准浏览器是浏览器会给方法传递事件对象，我们只需要定义一个形参去接受这个对象即可。但在IE6-8中浏览器不会传递对象给方法，相关信息记录在window.event中，需要到这里去查找

4、event.clientX/clientY:当前鼠标触发点距离当前屏幕左上角的距离

5、event.type 存储的是当前鼠标触发的行为类型‘click’

6、事件源对象
	event.target:事件源，当前鼠标触发的是那个元素，那么就存储的是那个元素。
	在IE6-8中不存在这个属性,event.target的值是undefined
	事件对象的属性里会有事件源的相关属性。
	事件源指的是鼠标点击的那个元素标签的相关信息
		event.target  //  火狐只有这个
		event.srcElement  // IE6-8只有这个
		chrome两者都有
	
7、求事件源对象的兼容写法
	div.onclick  = function (e) {
	var event = e || window.event; //起兼容作用。IE浏览器中e会失效，它的事件对象会在window.event上记录
	var target = event.target || event.srcElement;
	console.log(target);

8、event.pageX 和 event.pageY:当前鼠标触发点距离body左上角(页面第一屏最左上端)的x/y轴的坐标，但在IE6-8中没有这个属性，但我们可以使用clientY + 滚动条卷去的高度来获取。
	event.pageX　= event.pageX || (event.clientX + (document.body.scrollLeft || document.documentElement.scrollLeft))
	
	event.pageY　= event.pageY || (event.clientY + (document.body.scrollTop || document.documentElement.scrollTop))

9、event.preventDefault():阻止浏览器的默认行为.
	例如a标签
		<a href="http://www.baidu.com" target="_blank">百度一下</a>
	知a标签的默认行为就是跳转页面，但我们有时候使用a标签，只想使用它的特殊性，并不想点击的时候跳转
	
	注意：我们给li加:hover伪类在IE6浏览器中是不兼容的，只有a标签的这个伪类兼容所有浏览器

	var linkList = document.getElementByTagName('a');
	for (var i = 0;i < linkList.length; i++) {
		linkList[i].onclick = function (event) {
			event = event || window.event;
			event.preventDefault();
		}
	}
	
	直接在html结构上阻止默认事件
		<a href="javascript:;"></a>
		<a href="javascript:void 0;"></a>
		思考这三种写法的区别

10、event.stopPropagation():阻止事件的传播(可以阻止捕获和冒泡的任一阶段)，在IE6-8下不兼容，使用event.cancleBubble=true;来代替		
	event.stopPropagation ? event.stopPropagation() : event.canceBubble=true;
		
11、keyBoradEvent:键盘事件
	var input = document.getElementById('input1');
		input.onkeyup = function (event) {
			event = event || window.event ;
			//此时event存储的是键盘事件
			console.log(event);
			//当前键盘上每一个键对应的值
			//空格：32
			//删除键(Backspace)：8
			//删除键(delete)：46
			//回车键：13
			//四个方向键：左37，上38，右39，下40
			console.log(event.keyCode);
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


























		
		}